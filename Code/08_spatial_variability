#codice per calcolare la variabilità spaziale 

# deviazione standard: quanto un sistema varia intorno ad una media, si calcola intorno ad una curva gaussiana, l'intorno del 68% dei dati è la dev standard 
  # calcolo scoostamento tra situazione e media, sotto radice è la deviazio e standard

library(terra)
library(imageRy)
library(ggplot2)
library(viridis)
library(patchwork)
library(rasterdiv)
library(RStoolbox) funz ggRGB

im.list()


#dataset ignoranti: età
23,22,23,49

media= (23+22+23+49)/4=29,25
#quanta vari c'è intorno a questa media?

numeratore=(23-29,25)^2 + (22-29,25)^2+(23-29,25)^2+(49-29,25)^2=520,75  #numeratore della formula, si chiama scarto quadratico
den=4 #numeri che abbiamo
varianza= numeratore/den=520,75/4=130,188 #calcolo della varianza

stdev=sqrt(varianza)=13.1751 #applichiamo la radice quadrata per capire la deviaizone standard

#tolgo 49
sd(c(23,22,23))=0.5773503

# a livello geologico posso avere uno strato diverso e se andassi a misurare posso capire la divresità 

sent=im.import("sentinel.png") #l'ultima banda è solo di controllo 
# band 1 =nir
# band 2 =red
# band 3 =green


# plotta l'immagine con il nir sulla componente red 
im.plotRGB(sent, r=1, g=2, b=3) 

# plotta 3 plots con nir sul top di ogni componente 
im.multiframe(1,3)
> im.plotRGB(sent, r=1, g=2, b=3)
> im.plotRGB(sent, r=2, g=1, b=3)
> im.plotRGB(sent, r=3, g=2, b=1)

#moving window molto importante e la trovo nei codes, la usiamo per calcolare la variabilità nelle bande

nir= sent[[1]] #primo livello di nir, usiamo il vicino infrarosso perchà per la sd abbiamo bisgono solo di un livello

  #ex: plotta con inferno nir palette 
  plot(nir, col=inferno(100))

focal #valori nel dintorno, nel dettaglio
# abbiamo scoperto che w di window è importante

sd3=focal(nir, w=c(3,3), fun=sd) #standard dev 3 pixel, e viene
#ci dice tutte le zone dove c'è un'alta deviazione tra di esse, quindi dove vediamo quelle linee giallastre c'è più alta variabilità
sd3duccio=focal(nir, matrix(1/9,3,3), fun=sd) #matrice di duccio 
#bisogna flippare sent

#ex: calcola sd della banda nir con una moving windows di  5 pixel
sd5=focal(nir, w=c(5,5), fun=sd)

#ex: usa ggplot per plottare la sd
im.ggplot(sd3)

#ex: plotta le due sd maps sd3 e sd5 una di fianco all'altra
p1=im.ggplot(sd3)
> p2=im.ggplot(sd5)
> library(patchwork)

> p1+p2

-----

ex: plotta original image set in RGB (ggRGB), insieme con le immagini sd 
p3=ggRGB(sent, r=1, g=2,b=3)
p1+p2+p3


-------
#GIOVE

#cosa facciamo con immagini di grandi dimensioni AGGREGATE

im.import(sentinel)
sent=flip(sent)
> plot(sent)

 ncell(sent)
[1] 633612 #numero di pixel per ogni livello
ncell(sent)*nlyr(sent) #numerous di pixel totali, considerando che ci sono 4 layer

senta=aggregate(sent, fact=2) #prendo il pixel iniziale e lo moltiplico per due volter ogni lato il pixel iniziale è 1/4 di quello finale
ncell(senta)*nlyr(senta) #quando campioniamo riduciamo l'immagine

#make multiframe and plot rgb the tree images (norm, 2,5)
im.multiframe(1,3)
im.plotRGB(sent, r=1, g=2, b=3)
im.plotRGB(senta, r=1, g=2, b=3)
im.plotRGB(senta5, r=1, g=2, b=3)

#calc the standard deviation 
#nir è il primo di sent

niraggregate=senta[[1]]
sd3a=focal(niraggregate, w=c(3,3), fun="sd")


#ex: calculate sd for the factor 5 image
nira5=senta5[[1]]
sd5a=focal(nira5, w=c(3,3), fun="sd")
plot(sd5a)


sd5a5=focal(nira5, w=c(5,5), fun="sd")
> plot(sd5a5)


p1=im.ggplot(senta)
p2=im.ggplot(sd3a)
p3=im.ggplot(sd5a)
p4=im.ggplot(sd5a5)


#variance al massimo gli estremi togliendo le cose poste ai medi,
nir=sent[[1]]
var3=sd3^2

sd5=focal(nir, w=c(5,5), fun="sd")
var5=sd5^2
